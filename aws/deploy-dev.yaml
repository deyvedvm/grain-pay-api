AWSTemplateFormatVersion: '2010-09-09'
Description: Spring Boot application deployment on EC2 with API Gateway for dev environment

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SpringBootJarS3Bucket:
    Description: S3 bucket where the Spring Boot JAR file is stored
    Type: String

  SpringBootJarS3Key:
    Description: S3 key for the Spring Boot JAR file
    Type: String

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  SpringBootEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-000ec6c25978d5999  # Replace with a valid AMI ID for your region
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          amazon-linux-extras install java-openjdk21 -y
          aws s3 cp s3://${SpringBootJarS3Bucket}/${SpringBootJarS3Key} /home/ec2-user/
          java -jar /home/ec2-user/${SpringBootJarS3Key} > /home/ec2-user/application.log 2>&1 &

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SpringBootApi-dev
      Description: API Gateway for Spring Boot application in dev environment

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'http://${SpringBootEC2Instance.PublicDnsName}:8080/{proxy}'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: dev

Outputs:
  InstancePublicDNS:
    Description: "Public DNS of the EC2 instance"
    Value: !GetAtt
      - SpringBootEC2Instance
      - PublicDnsName
  ApiEndpoint:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
